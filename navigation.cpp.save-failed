#include <algorithm>

#include "navigation.h"
#include "game.h"

bool compareRect(const glm::vec4* o1, const glm::vec4* o2)
{
    return o1->x < o2->x;
}

std::size_t HashPoint::operator()(const glm::vec2& p1) const
{
    return pow(10,floor(log(abs(p1.x))))*abs(p1.x) + abs(p1.y);
}

NavMesh::NavMeshNode::NavMeshNode(const glm::vec4& rect) : area(rect)
{

}

const glm::vec4& NavMesh::NavMeshNode::getArea()
{
    return area;
}

void NavMesh::NavMeshNode::addNode(NavMeshNode& n)
{
    const glm::vec4* otherArea = &(n.getArea());
    glm::vec4 intersect = vecIntersectRegion(*otherArea,area);
    nextTo.insert({&n,{intersect.x,intersect.y, intersect.x + intersect.z, intersect.y + intersect.a}});
    if (n.getNextTo().count(this) == 0) //if the other node hasn't added us, add it!
    {
        n.addNode(*this);
    }
}

void NavMesh::NavMeshNode::removeNode(NavMeshNode& n)
{
    auto found = nextTo.find(&n);
    if ( (found) != nextTo.end())
    {
        nextTo.erase(found);
    }
}

void NavMesh::NavMeshNode::setDimen(const glm::vec2& dimens)
{
    area.z = dimens.x;
    area.a = dimens.y;
}
void NavMesh::NavMeshNode::setRect(const glm::vec4& rect)
{
    area = rect;
}

NavMesh::Neighbors& NavMesh::NavMeshNode::getNextTo()
{
    return nextTo;
}

void NavMesh::NavMeshNode::render()
{
    Camera* cam = &(GameWindow::getCamera());
    for (auto it = nextTo.begin(); it != nextTo.end(); ++it)
    {
        GameWindow::requestNGon(4,{(it->second.x + it->second.z)/2,(it->second.y + it->second.a)/2},10,{0,1,0,1},0,true,1,false);
        glm::vec2 center = cam->toScreen({area.x + area.z/2, area.y + area.a/2});
        glm::vec2 otherCenter = cam->toScreen({it->first->getArea().x + it->first->getArea().z/2, it->first->getArea().y + it->first->getArea().a/2});
        PolyRender::requestLine({center.x,center.y,otherCenter.x,otherCenter.y},{center.x,0,otherCenter.x,1},1);
    }
}

NavMesh::NavMeshNode::~NavMeshNode()
{
    for (auto j = nextTo.begin(); j != nextTo.end(); ++j)
    {
        if (j->first)
        {
            j->first->removeNode(*this);
        }
    }
}

NavMesh::NavMeshNode* NavMesh::getNode(const glm::vec2 point)
{
    for (int i = nodes.size() - 1; i >= 0; i-- ) //nothing special about iterating backwards; just didn't want to make a size variable
    {
        if (pointInVec(nodes[i]->getArea(), point.x, point.y, 0))
        {
            return nodes[i].get();
        }
    }
    return nullptr;
}

NavMesh::NavMesh(const glm::vec4& bounds_, RawQuadTree& tree_) : bounds(bounds_), tree(&tree_)
{

}

void NavMesh::init(ObjectStorage& storage)
{
    typedef std::pair<glm::vec3,std::vector<NavMeshNode*>> scanLine;
    std::vector<const glm::vec4*> vec;
    for (auto it = storage.begin(); it != storage.end(); ++it)
    {
        vec.push_back(&(it->first->getRect().getRect()));
    }
    glm::vec4* edge = new glm::vec4({bounds.x + bounds.z, bounds.y, 1, bounds.a});
    vec.push_back(edge);
    std::sort(vec.begin(), vec.end(),compareRect);
    int size = vec.size();
    std::vector<scanLine> frontLine;
    frontLine.push_back({{bounds.x, bounds.y, bounds.a},{}});
   // std::cout << frontLine[0].second << std::endl;
    for (int i = 0; i < size; ++i)
    {
        const glm::vec4* rect = vec[i];
        scanLine top = {{0,0,0},{}}, bottom = {{0,0,0},{}}; //the lines that will result from the top and bottom
        unsigned int it;
        //std::cout << frontLine[0].first.y << " " << frontLine[frontLine.size()-1].first.y << std::endl;
        for ( it = 0; it < frontLine.size(); )
        {
            glm::vec3* line = &(frontLine[it].first);
            if (vecIntersect({line->x,line->y,rect->x - line->x,line->z},*rect )) //if the next object intersects with a front line
                {
                    NavMeshNode* node = nullptr;
                    if (rect->x - line->x > 0) //no reason to create a node if it has a width of 0
                    {
                        node = new NavMeshNode({line->x,line->y, rect->x - line->x, line->z}); //create the new node that is from the line up to the object
                        nodes.emplace_back(node);
                        int size1 = frontLine[it].second.size();
                        for (int j = 0; j < size1; ++j) //add all of the neighbors we've encountered so far
                        {
                            node->addNode(*(frontLine[it].second[j]));
                        }
                        if (it < frontLine.size() - 1 && frontLine[it + 1].first.x <= rect->x) //same but now for the line above. We don't have to check if this line is actually the previous line because its impossible for the bottom line to already be erased
                        {
                            frontLine[it + 1].second.push_back(node);
                        }
                        if (it > 0 && frontLine[it - 1].first.x <= rect->x && frontLine[it - 1].first.y + frontLine[it - 1].first.z == line->y) //if the line directly below this one is left of the rect, then its resulting node must be a neighbor
                        {
                            frontLine[it - 1].second.push_back(node);
                        }
                    }


                    glm::vec3 pushRect = {rect->x , line->y,rect->y - line->y}; //top line
                    if (pushRect.z > 0)
                    {
                        top.first = pushRect;
                        if (node)
                        {
                            top.second.push_back(node);
                        }
                    }
                    pushRect = {rect->x, rect->y + rect->a, line->y + line->z - (rect->y + rect->a) }; //bottom line
                    frontLine.erase(frontLine.begin() + it); //we erase here because if we erase any earlier, we wouldn't be able to access line's variables. If we erase later, we may not erase due to the break statement.
                    if (pushRect.z > 0)//if this line creates a bottom line, then we are certainly done; the next line would be even lower and will certainly not intersect with our object
                    {
                        bottom.first = pushRect;
                        if(node)
                        {
                            bottom.second.push_back(node);
                        }
                        break;
                    }
                }
            else
                {
                    ++it;
                }
        }
        if (top.first.z > 0) //add the new top node
        {
            frontLine.insert(frontLine.begin() + it, top);
            it++;
        }
        frontLine.insert(frontLine.begin() + it,{{rect->x + rect->z ,rect->y, rect->a },{}}); //middle node
        it++;
        if (bottom.first.z > 0) //bottom node
        {
            frontLine.insert(frontLine.begin() + it, bottom);
        }
       /* for (int a = 0; a < frontLine.size(); a++)
        {
            std::cout << frontLine[a].first.y  << " " << frontLine[a].first.z << std::endl;
        }
        std::cout << "\n";*/
    }

}


void NavMesh::render()
{
    switch (KeyManager::getJustPressed())
    {
    case SDLK_F1:
        renderNodes = !renderNodes;
        break;
    case SDLK_F2:
        renderPath = !renderPath;
        break;
    }
    if (renderNodes)
    {
       for (auto it = nodes.begin(); it != nodes.end(); ++it)
       {
           GameWindow::requestRect(it->get()->getArea(),{0,0,0,1},false,0,1,false);
           it->get()->render();
           //std::cout << it->get()->getArea().z << " " << it->get()->getArea().a << std::endl;
       }
    }
    if (renderPath)
    {
       if (MouseManager::getJustClicked() == SDL_BUTTON_LEFT)
       {
           left = GameWindow::getCamera().toWorld({MouseManager::getMousePos().first, MouseManager::getMousePos().second});
       }
       else if (MouseManager::getJustClicked() == SDL_BUTTON_RIGHT)
       {
           right = GameWindow::getCamera().toWorld({MouseManager::getMousePos().first, MouseManager::getMousePos().second});
       }
       if (left != right)
       {

           auto path = getPath(left,right);
           auto end = path.end();
           glm::vec2* prev = &left, *next;
           for (auto it = path.begin(); it != end; ++it)
           {
                next = &(*it);
                GameWindow::requestNGon(10,*prev,2,{1,0,0,1},0,true,0,false);
                GameWindow::requestNGon(10,*next,2,{1,0,0,1},0,true,0,false);
                glm::vec2 p1 = GameWindow::getCamera().toScreen(*prev);
                glm::vec2 p2 = GameWindow::getCamera().toScreen(*next);
                PolyRender::requestLine({p1.x,p1.y,p2.x,p2.y},{1,1,1,1},1);
                prev = next;
               // std::cout << p1.x << " " << p1.y << " " << p2.x << " " << p2.y << std::endl;
           }
          // GameWindow::requestNGon(10,right,2,{0,1,0,1},0,true,0,false);
       }
    }
}

Path NavMesh::getPath(const glm::vec2& start, const glm::vec2& end)
{
    NavMeshNode* startNode = getNode(start);  //ndoe we start off with. Repurposed later to be the node we are currently working on
    NavMeshNode* endNode = getNode(end);
    if (startNode && endNode)
    {
        if (startNode == endNode)
        {
            return {start,end}; //if both the start and end is in the same node then just move lol
        }
        std::unordered_map<glm::vec2,std::pair<double,glm::vec2>,HashPoint> paths; //shortest distance from start to paths as well as the closest node. Used for backtracking
        MinHeap<std::pair<glm::vec2,NavMeshNode*>> heap; //finds the next node to process. We have to also store what node the point is associated with since the points all lie on the border of two nodes.
        heap.add({start,startNode},0);
        glm::vec2 curPoint; //current point to analyze
        NavMeshNode* curNode = startNode; //current node to analyze
        bool done = false; //whether or not we found a path
       // std::cout << "START" << std::endl;
        while (!done && heap.size() != 0)
        {
          //  std::cout << "PrePeak" << std::endl;
            curPoint = heap.peak().first;
            curNode = heap.peak().second;
            heap.pop();

            glm::vec4 tempRect = {std::min(curPoint.x,end.x), std::min(curPoint.y,end.y), std::max(abs(end.x - curPoint.x),1.0f), std::max(1.0f,abs(end.y - curPoint.y))};
            auto vec = tree->getNearest(tempRect);
           // GameWindow::requestRect(tempRect,{1,0,1,1},false,0,1,0);
            int size = vec.size();
            if (size == 0)
            {
                done = true; //if there is a direct path between our current point and the goal, we can stop right here.
            }
            else
            {
                for (int i = 0; i < size; ++i)
                {
                    if (lineInVec(end,curPoint,(static_cast<RectPositional*>(vec[i]))->getRect())) //unfortunately, there is not a direct path
                    {
                        break;
                    }
                    if (i == size-1) //there is a direct path!
                    {
                        done = true;
                    }
                }
            }
          //  std::cout << "Heap" << std::endl;
            if (!done)
            {
                Neighbors* nextTo = &(curNode->getNextTo());
                auto endIt = nextTo->end(); //get the end iterator
               // printRect(curNode->getArea());
              //  std::cout << "Size: " << nextTo->size() << std::endl;
                for (auto it = nextTo->begin(); it != endIt; ++it)
                {
                    glm::vec2 midpoint; //this is not actually the midpoint, but rather the point on the intersection line we think will be closest to the goal
                    if (it->second.y == it->second.a) //if the intersection is horizontal
                    {
                        float left = std::min(it->second.x,it->second.z);
                        float right = it->second.x + it->second.a - left;
                       midpoint = {std::max(std::min(right,(end.x + curPoint.x)/2),left), it->second.y} ; //find the best point. Sometimes, the best point is off the line, so we take either edge point
                    }
                    else //if the intersection is vertical
                    {
                        float high = std::max(it->second.y, it->second.a);
                        float low = it->second.y + it->second.a - high;
                       midpoint = {it->second.x, std::max(std::min(high,(end.y + curPoint.y)/2),low)};
                    }
                    double newDistance = pointDistance(curPoint,midpoint) + paths[curPoint].first;
                    double score = newDistance;// + pointDistance(midpoint,end); //the final score that also uses the heuristic
                    if (it->first == endNode) //found it
                    {
                        paths[midpoint].second = curPoint;
                        curPoint = midpoint;
                        done = true;
                        break;
                    }
                    if (midpoint == curPoint) //no reason to process the current point
                    {
                        continue;
                    }
                    if (paths.count(midpoint) == 0 || paths[midpoint].first > newDistance) //if we found the new shortest distance, update
                    {
                        if (paths.count(midpoint) == 0)
                        {
                            heap.add({midpoint,it->first},score);
                        }
                        else
                        {
                            heap.update({midpoint,it->first},paths[midpoint].first,score);
                        }
                        paths[midpoint].first = newDistance;
                        paths[midpoint].second = curPoint;
                    }
                }
            }
        }

        Path finalPath;
        if (done)
        {
            while (curPoint != start )
            {

                finalPath.push_front(curPoint);
                curPoint = paths[curPoint].second;
            }
            finalPath.push_back(end);
            finalPath.push_front(start);
        }
            return finalPath;
    }
    else
    {
        throw std::logic_error("Can't get path with no starting or ending node!");
    }
}
